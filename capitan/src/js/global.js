import '@babel/polyfill';

/*
 * Capitan - global.js
 * initialization of components, polyfills, utils, handlers and functions
 */

/**
 * import Capitan config
 * dynamic webpack import
 * @see https://webpack.js.org/api/module-methods/#import-
 * @param callback - run callback after successful import
 */
function loadCapitan(callback) {
	// use webpackMode: "eager" so no extra chunk file is generated
	import(/* webpackMode: "eager" */ './Capitan/capitan').then(Capitan => {
		// make Capitan available globally
		window.Capitan = Capitan;
		console.groupCollapsed('Capitan Config');
		console.log(Capitan);
		//console.table(Capitan.Vars); // disabled because IE11 doesn't support
		console.groupEnd();
		callback();
	});
}

/**
 * check for browser capabilities and load polyfills if needed
 * @param callback - run callback after successful import
 */
function loadPolyfills(callback) {
	const modernBrowser = 'fetch' in window;

	// check if polyfills are needed
	if (!modernBrowser) {
		// create and append polyfill script that is generated by webpack
		import(/* webpackChunkName: "polyfill" */ 'whatwg-fetch').then(() => {
			callback();
		});
	} else {
		callback();
	}
}

/**
 * load all needed dependencies for the components
 * @param callback - run callback after successful import
 */
function loadDependencies(callback) {
	// import handlers and bundle them with webpack
	import(/* webpackChunkName: "capitan" */ './util/inject-smartresize').then(
		() => {
			import(/* webpackChunkName: "capitan" */ './handle/fetch-handler').then(
				() => {
					import(/* webpackChunkName: "capitan" */ './handle/cookie-handler').then(
						() => {
							import(/* webpackChunkName: "capitan" */ './handle/anchor-handler').then(
								() => {
									import(/* webpackChunkName: "capitan" */ './handle/ajax-handler').then(
										() => {
											import(/* webpackChunkName: "capitan" */ './handle/rel-security').then(
												() => {
													import(/* webpackChunkName: "capitan" */ './handle/resize-handler').then(
														resizeHandler => {
															resizeHandler.default();

															callback();
														}
													);
												}
											);
										}
									);
								}
							);
						}
					);
				}
			);
		}
	);
}

/**
 * initialize components
 */
function loadComponents() {
	// example implementation for component < Capitan 1.5
	// it would be better to handle the import inside the component - see below
	//if (document.querySelector(`.custom-select`)) {
	// import dependencies first
	// import(/* webpackChunkName: "custom-select" */ '../components/custom-select/js/libs/vendor/select2/select2.min.css').then(() => {
	// 		import(/* webpackChunkName: "custom-select" */ '../components/custom-select/js/libs/vendor/select2/select2.full.min').then(() => {
	// 			import(/* webpackChunkName: "custom-select" */ '../components/custom-select/custom-select');
	// 		});
	// 	});
	// }

	// example implementation for component >= Capitan 1.5 - using ES6

	import(/* webpackChunkName: "header" */ '../components/header/header').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "nav-main" */ '../components/nav-main/nav-main').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "nav-mobile" */ '../components/nav-mobile/nav-mobile').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "slider" */ '../components/slider/slider').then(
		component => {
			component.init();
		}
	);

	// import the component and handle everything else inside that component
	import(/* webpackChunkName: "custom-select" */ '../components/custom-select/custom-select').then(
		component => {
			// component exports init function
			component.init();
		}
	);

	import(/* webpackChunkName: "cookie-layer" */ '../components/cookie-layer/cookie-layer').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "form" */ '../components/form/form').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "form-validation" */ '../components/form/form-validation').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "custom-datepicker" */ '../components/custom-datepicker/custom-datepicker').then(
		component => {
			component.init();
		}
	);

	if (document.querySelector('.scrolltop')) {
		import(/* webpackChunkName: "scrolltop" */ '../components/scrolltop/scrolltop').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.pagination')) {
		import(/* webpackChunkName: "pagination" */ '../components/pagination/pagination').then(
			component => {
				component.init();
			}
		);
	}

	if (
		document.querySelector(
			'.accordion, [data-component-accordion], .footer, .expert-listing'
		)
	) {
		import(/* webpackChunkName: "accordion" */ '../components/accordion/accordion').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.content-block')) {
		import(/* webpackChunkName: "content-block" */ '../components/content-block/content-block').then(
			component => {
				component.init();
			}
		);
	}

	import(/* webpackChunkName: "notification" */ '../components/notification/notification').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "nav-services" */ '../components/nav-services/nav-services').then(
		component => {
			component.init();
		}
	);

	import(/* webpackChunkName: "modernizr" */ 'modernizr').then(Modernizr => {
		if (!Modernizr.objectfit) {
			import(/* webpackChunkName: "polyfill" */ './util/object-fit-polyfill');
		}
	});

	if (document.querySelector('.fancybox, [data-fancybox]')) {
		import(/* webpackChunkName: "fancybox" */ '../components/fancybox/fancybox').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.animations, [data-aos]')) {
		import(/* webpackChunkName: "animations" */ '../components/animations/animations').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.gmaps')) {
		import(/* webpackChunkName: "gmaps" */ '../components/gmaps/gmaps').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.countup')) {
		import(/* webpackChunkName: "countup" */ '../components/countup/countup').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.tabs')) {
		import(/* webpackChunkName: "tabs" */ '../components/tabs/tabs').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.embed-video')) {
		import(/* webpackChunkName: "embed-video" */ '../components/embed-video/embed-video.scss');
		import(/* webpackChunkName: "embed-video" */ '../components/embed-video/embed-video').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.reveal')) {
		import(/* webpackChunkName: "reveal" */ '../components/reveal/reveal').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.anchor-nav')) {
		import(/* webpackChunkName: "anchor-nav" */ '../components/anchor-nav/anchor-nav').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.switch')) {
		import(/* webpackChunkName: "switch" */ '../components/switch/switch').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('#disease-filter')) {
		import(/* webpackChunkName: "diseases" */ '../components/disease-filter/disease-filter').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.disease-box')) {
		import(/* webpackChunkName: "diseases" */ '../components/disease-box/disease-box').then(
			component => {
				component.init();
			}
		);
	}

	if (document.querySelector('.gewinnspiel')) {
		import(/* webpackChunkName: "gewinnspiel" */ '../components/gewinnspiel/gewinnspiel').then(
			component => {
				component.init();
			}
		);
	}
}

(function() {
	/**
	 * wait for document ready event before starting
	 */
	$(document).ready(function() {
		loadCapitan(() => {
			loadPolyfills(() => {
				loadDependencies(() => {
					loadComponents();
				});
			});
		});
	});
})();
